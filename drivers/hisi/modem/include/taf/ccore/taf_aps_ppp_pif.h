/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2016

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2016-07-18 15:34:33
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef TAF_APS_PPP_PIF_H
#define TAF_APS_PPP_PIF_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "vos.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/

#define TAF_APS_PPP_IPV4_ADDR_LEN                           ( 4 )
#define TAF_APS_PPP_IPV6_ADDR_LEN                           ( 16 )
#define TAF_APS_PPP_MAX_AUTHDATA_USERNAME_LEN               ( 127 )
#define TAF_APS_PPP_MAX_AUTHDATA_PASSWORD_LEN               ( 127 )

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum TAF_APS_PPP_PIF_MSG_TYPE_ENUM
{
    ID_APS_PPP_ACT_REQ                                      = 0x0000, /**< @sa APS_PPP_ACT_REQ_STRU */
    ID_PPP_APS_ACT_CNF                                      = 0x0001, /**< @sa PPP_APS_ACT_CNF_STRU */
    ID_APS_PPP_DEACT_REQ                                    = 0x0002, /**< @sa APS_PPP_DEACT_REQ_STRU */
    ID_PPP_APS_DEACT_CNF                                    = 0x0003, /**< @sa PPP_APS_DEACT_CNF_STRU */
    ID_APS_PPP_DEACT_IND                                    = 0x0004, /**< @sa APS_PPP_DEACT_IND_STRU */
    ID_PPP_APS_DEACT_NTF                                    = 0x0005, /**< @sa PPP_APS_DEACT_NTF_STRU */
    ID_PPP_APS_MODIFY_IND                                   = 0x0006, /**< @sa PPP_APS_MODIFY_IND_STRU */
    ID_APS_PPP_MODE_CHANGE_NTF                              = 0x0007, /**< @sa APS_PPP_MODE_CHANGE_NTF_STRU */
    ID_APS_PPP_DIAL_MODE_NTF                                = 0x0008, /**< @sa APS_PPP_DIAL_MODE_NTF_STRU */
    ID_APS_PPP_LINK_STATUS_NTF                              = 0x0009, /**< @sa APS_PPP_LINK_STATUS_NTF_STRU */
    ID_PPP_APS_RECONN_IND                                   = 0x000A, /**< @sa PPP_APS_RECONN_IND_STRU */
    ID_TAF_APS_PPP_PIF_MSG_TYPE_ENUM_BUTT                   = 0x000B
};
typedef VOS_UINT16 TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_ACTIVE_RESULT_ENUM_UINT8
 *
 * Description : user dial-up result
 *******************************************************************************/
enum TAF_APS_PPP_ACTIVE_RESULT_ENUM
{
    TAF_APS_PPP_ACTIVE_RESULT_SUCC                          = 0x00, /**< active successfully */
    TAF_APS_PPP_ACTIVE_RESULT_GENERAL_FAIL                  = 0x01, /**< active failed, but modem will not re-dialup */
    TAF_APS_PPP_ACTIVE_RESULT_PDSN_AUTH_TYPE_FAIL           = 0x02, /**< PDSN prefers using EAP as the authentication way, however, as UE stays on
1X/HRPD mode, it'll cause failure to do authentication. In this situation,
modem will re-dialup automatically by itself to retry. */
    TAF_APS_PPP_ACTIVE_RESULT_ENUM_BUTT                     = 0x03
};
typedef VOS_UINT8 TAF_APS_PPP_ACTIVE_RESULT_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_LINK_STATUS_ENUM_UINT8
 *
 * Description : It defines link status.
 *******************************************************************************/
enum TAF_APS_PPP_LINK_STATUS_ENUM
{
    TAF_APS_PPP_LINK_NOT_EXISTED        = 0x00,
    TAF_APS_PPP_LINK_CONNING            = 0x01, /**< on connecting */
    TAF_APS_PPP_LINK_DISCING            = 0x02, /**< on disconnecting */
    TAF_APS_PPP_LINK_CONNECTED          = 0x03, /**< already connected */
    TAF_APS_PPP_LINK_STATUS_BUTT        = 0x04
};
typedef VOS_UINT8 TAF_APS_PPP_LINK_STATUS_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_NAI_FROM_ENUM_UINT32
 *
 * Description : It defines where NAI comes from.
 *******************************************************************************/
enum TAF_APS_PPP_NAI_FROM_ENUM
{
    TAF_APS_PPP_NAI_FROM_AP             = 0x00000000, /**< got NAI from AP side */
    TAF_APS_PPP_NAI_FROM_MODEM          = 0x00000001, /**< got NAI from modem side */
    TAF_APS_PPP_NAI_FROM_BUTT           = 0x00000002
};
typedef VOS_UINT32 TAF_APS_PPP_NAI_FROM_ENUM_UINT32;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_CDATA_DIAL_MODE_ENUM_UINT8
 *
 * Description : CDMA dial-up mode
 *******************************************************************************/
enum TAF_APS_PPP_CDATA_DIAL_MODE_ENUM
{
    TAF_APS_PPP_CDATA_DIAL_MODE_ASYNC_CALL                  = 0x00, /**< Not used yet! */
    TAF_APS_PPP_CDATA_DIAL_MODE_RELAY                       = 0x01,
    TAF_APS_PPP_CDATA_DIAL_MODE_NETWORK                     = 0x02,
    TAF_APS_PPP_CDATA_DIAL_MODE_BUTT                        = 0x03
};
typedef VOS_UINT8 TAF_APS_PPP_CDATA_DIAL_MODE_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_AUTH_TYPE_ENUM_UINT8
 *
 * Description : ppp auth type
 *******************************************************************************/
enum TAF_APS_PPP_AUTH_TYPE_ENUM
{
    TAF_APS_PPP_AUTH_TYPE_NONE          = 0x00, /**< No auth */
    TAF_APS_PPP_AUTH_TYPE_PAP           = 0x01,
    TAF_APS_PPP_AUTH_TYPE_CHAP          = 0x02,
    TAF_APS_PPP_AUTH_TYPE_PAP_OR_CHAP   = 0x03, /**< Some mobile phones have this configuration */
    TAF_APS_PPP_AUTH_TYPE_BUTT          = 0x04
};
typedef VOS_UINT8 TAF_APS_PPP_AUTH_TYPE_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_ADDR_TYPE_ENUM_UINT8
 *
 * Description : address type information
 *******************************************************************************/
enum TAF_APS_PPP_ADDR_TYPE_ENUM
{
    TAF_APS_PPP_ADDR_TYPE_NULL          = 0x00,
    TAF_APS_PPP_ADDR_TYPE_IPV4          = 0x01,
    TAF_APS_PPP_ADDR_TYPE_IPV6          = 0x02,
    TAF_APS_PPP_ADDR_TYPE_IPV4V6        = 0x03, /**< both IPv4 and v6 */
    TAF_APS_PPP_ADDR_TYPE_PPP           = 0x04,
    TAF_APS_PPP_ADDR_TYPE_BUTT          = 0x05
};
typedef VOS_UINT8 TAF_APS_PPP_ADDR_TYPE_ENUM_UINT8;

/** ****************************************************************************
 * Name        : TAF_APS_PPP_RAT_MODE_ENUM_UINT8
 *
 * Description : CDMA RAT Mode
 *******************************************************************************/
enum TAF_APS_PPP_RAT_MODE_ENUM
{
    TAF_APS_PPP_RAT_MODE_1X             = 0x00,
    TAF_APS_PPP_RAT_MODE_HRPD           = 0x01,
    TAF_APS_PPP_RAT_MODE_BUTT           = 0x02
};
typedef VOS_UINT8 TAF_APS_PPP_RAT_MODE_ENUM_UINT8;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/** ****************************************************************************
 * Name        : TAF_APS_PPP_IPV4_DNS_STRU
 *
 * Description :
 *******************************************************************************/
typedef struct
{
    VOS_UINT32                          bitOpIpv4PrimDNS:1;
    VOS_UINT32                          bitOpIpv4SecDNS:1;
    VOS_UINT32                          bitOpSpare:30;
    VOS_UINT8                           aucIpv4PrimDNS[TAF_APS_PPP_IPV4_ADDR_LEN];
    VOS_UINT8                           aucIpv4SecDNS[TAF_APS_PPP_IPV4_ADDR_LEN];
} TAF_APS_PPP_IPV4_DNS_STRU;

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : APS_PPP_ACT_REQ_STRU
 *
 * Description : After traffic channel is connected in CDMA mode, Aps notify
 * PPP to negotiate.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;                                              /**< [0..14] */
    TAF_APS_PPP_RAT_MODE_ENUM_UINT8                         enMode;
    TAF_APS_PPP_ADDR_TYPE_ENUM_UINT8                        enPdnType;
    TAF_APS_PPP_AUTH_TYPE_ENUM_UINT8                        enAuthType;
    VOS_UINT8                                               aucUserName[TAF_APS_PPP_MAX_AUTHDATA_USERNAME_LEN+1];
    VOS_UINT8                                               aucPassword[TAF_APS_PPP_MAX_AUTHDATA_PASSWORD_LEN+1];
    TAF_APS_PPP_NAI_FROM_ENUM_UINT32                        enNaiSource;
} APS_PPP_ACT_REQ_STRU;

/** ****************************************************************************
 * Name        : PPP_APS_ACT_CNF_STRU
 *
 * Description : PPP send result of PPP negotiation to Aps.
 *
 * @enResult: TAF may retry to dialup again based on its value
 * @ucPdnId: it need to be the same as it in active request
 * @enPdnType: it's the actual using pdn type after negotiation with PDSN
 * @usMtu: it's the PDSN ppp's using parameter
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    TAF_APS_PPP_ACTIVE_RESULT_ENUM_UINT8                    enResult;
    VOS_UINT8                                               aucReserved[3];
    VOS_UINT8                                               ucPdnId;                                /**< [0..14] */
    TAF_APS_PPP_ADDR_TYPE_ENUM_UINT8                        enPdnType;
    VOS_UINT16                                              usMtu;
    VOS_UINT8                                               aucIpv4Addr[TAF_APS_PPP_IPV4_ADDR_LEN];
    VOS_UINT8                                               aucIpv6Addr[TAF_APS_PPP_IPV6_ADDR_LEN];
    TAF_APS_PPP_IPV4_DNS_STRU                               stIpv4Dns;
} PPP_APS_ACT_CNF_STRU;

/** ****************************************************************************
 * Name        : APS_PPP_DEACT_REQ_STRU
 *
 * Description : When AT receive PDP disconnect request, Aps notify PPP to
 * terminate PPP.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    TAF_APS_PPP_RAT_MODE_ENUM_UINT8                         enMode;
    VOS_UINT8                                               aucReserved[2];
} APS_PPP_DEACT_REQ_STRU;

/** ****************************************************************************
 * Name        : PPP_APS_DEACT_CNF_STRU
 *
 * Description : PPP send result of PPP termination to Aps. Result is VOS_OK or
 * VOS_ERR.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT32                                              ulResult;       /**< VOS_OK or VOS_ERR */
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    VOS_UINT8                                               aucReserved[3];
} PPP_APS_DEACT_CNF_STRU;

/** ****************************************************************************
 * Name        : APS_PPP_DEACT_IND_STRU
 *
 * Description : APS notify PPP, disconnected locally.
 * @enMode: pdp's current data service mode
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    TAF_APS_PPP_RAT_MODE_ENUM_UINT8                         enMode;
    VOS_UINT8                                               aucReserved[2];
} APS_PPP_DEACT_IND_STRU;

/** ****************************************************************************
 * Name        : PPP_APS_DEACT_NTF_STRU
 *
 * Description : PPPC notifies APS that ppp in PDSN has disconnected its
 * connection.
 * @enMode: the current RAT mode in PPPC
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    TAF_APS_PPP_RAT_MODE_ENUM_UINT8                         enMode;
    VOS_UINT8                                               aucReserved[2];
} PPP_APS_DEACT_NTF_STRU;

/** ****************************************************************************
 * Name        : PPP_APS_MODIFY_IND_STRU
 *
 * Description : It happens after re-negotiation with PDSN, including lcp or
 * ipcp negotiation. Then PPPC uses this signal to indicate APS the latest
 * related parameters.
 * @usMtu: it's the PDSN ppp's using parameter
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;                                /**< [0..14] */
    TAF_APS_PPP_ADDR_TYPE_ENUM_UINT8                        enPdnType;
    VOS_UINT16                                              usMtu;
    VOS_UINT8                                               aucIpv4Addr[TAF_APS_PPP_IPV4_ADDR_LEN];
    VOS_UINT8                                               aucIpv6Addr[TAF_APS_PPP_IPV6_ADDR_LEN];
    TAF_APS_PPP_IPV4_DNS_STRU                               stIpv4Dns;
} PPP_APS_MODIFY_IND_STRU;

/** ****************************************************************************
 * Name        : APS_PPP_MODE_CHANGE_NTF_STRU
 *
 * Description : APS notifies PPP that rat mode has been changed.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    TAF_APS_PPP_RAT_MODE_ENUM_UINT8                         enMode;
    VOS_UINT8                                               aucReserved[2];
} APS_PPP_MODE_CHANGE_NTF_STRU;

/** ****************************************************************************
 * Name        : APS_PPP_DIAL_MODE_NTF_STRU
 *
 * Description : APS notifies PPP that dial-up mode has been changed.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT16                                              usClientId;     /**< Not used yet! */
    TAF_APS_PPP_CDATA_DIAL_MODE_ENUM_UINT8                  enDialMode;
    VOS_UINT8                                               aucReserved[1];
} APS_PPP_DIAL_MODE_NTF_STRU;

/** ****************************************************************************
 * Name        : APS_PPP_LINK_STATUS_NTF_STRU
 *
 * Description : APS notifies PPP current link status
 * ATTENTION: @enLinkStatus is the same as the return value of routine
 * TAF_APS_GetPppLinkStatus. This signal is only reserved for future.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;
    TAF_APS_PPP_LINK_STATUS_ENUM_UINT8                      enLinkStatus;
    VOS_UINT8                                               aucReserved[2];
} APS_PPP_LINK_STATUS_NTF_STRU;

/** ****************************************************************************
 * Name        : PPP_APS_RECONN_IND_STRU
 *
 * Description : During the ppp negotiation procedure, if there is no link,
 * PPPC use this signal to request APS to re-connect it.
 * ATTENTION: It's possible to request more than one time during the ppp
 * negotiation procedure.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    TAF_APS_PPP_PIF_MSG_TYPE_ENUM_UINT16                    enMsgId;
    VOS_UINT16                                              usOpId;
    VOS_UINT8                                               ucPdnId;        /**< [0..14] */
    VOS_UINT8                                               aucReserved[3];
} PPP_APS_RECONN_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : TAF_APS_GetPppLinkStatus
 *
 * Description : It's used to fetch the current user dial-up link status.
 * ATTENTION: It's only valid after user has dialed up.
 *
 * @param[in] ucPdnId     [0..14]
 *******************************************************************************/
TAF_APS_PPP_LINK_STATUS_ENUM_UINT8 TAF_APS_GetPppLinkStatus(VOS_UINT8 ucPdnId);

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
